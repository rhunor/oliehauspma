// src/middleware.ts - UPDATED WITH FILE SECURITY (Preserving existing structure)
import { withAuth } from "next-auth/middleware";
import { NextResponse } from "next/server";

export default withAuth(
  function middleware(request) {
    const { pathname, search } = request.nextUrl;

    // EXISTING: Handle service worker files directly to prevent redirect errors
    if (pathname === '/sw.js' || pathname === '/service-worker.js') {
      return NextResponse.rewrite(new URL('/sw.js', request.url));
    }

    // EXISTING: Handle workbox files (generated by PWA plugins)
    if (pathname.startsWith('/workbox-') && pathname.endsWith('.js')) {
      return NextResponse.rewrite(new URL(pathname, request.url));
    }

    // EXISTING: Handle manifest.json
    if (pathname === '/manifest.json') {
      return NextResponse.rewrite(new URL('/manifest.json', request.url));
    }

    // EXISTING CODE - Enhanced authentication logic
    const token = request.nextauth.token;

    // EXISTING: Public routes that don't require authentication
    const publicRoutes = ["/login", "/api/auth", "/unauthorized"];
    const isPublicRoute = publicRoutes.some(route => pathname.startsWith(route));

    // EXISTING: Handle session expiration and reconnection
    if (!token && !isPublicRoute) {
      const redirectUrl = new URL("/login", request.url);
      if (pathname !== "/" && !pathname.startsWith("/api/")) {
        redirectUrl.searchParams.set("callbackUrl", `${pathname}${search}`);
      }
      return NextResponse.redirect(redirectUrl);
    }

    // EXISTING: Better handling of authenticated users accessing login page
    if (token && pathname === "/login") {
      const callbackUrl = request.nextUrl.searchParams.get("callbackUrl");
      
      if (callbackUrl && callbackUrl.startsWith("/")) {
        const userRole = token.role as string;
        const allowedPaths = getAllowedPathsForRole(userRole);
        
        if (allowedPaths.some(path => callbackUrl.startsWith(path))) {
          return NextResponse.redirect(new URL(callbackUrl, request.url));
        }
      }
      
      const redirectPath = getRoleBasedRedirect(token.role as string);
      return NextResponse.redirect(new URL(redirectPath, request.url));
    }

    // EXISTING: Role-based route protection with enhanced logic
    if (token && !isPublicRoute) {
      const userRole = token.role as string;
      
      // EXISTING: Enhanced route mappings with hierarchical access
      const roleRoutes: Record<string, string[]> = {
        super_admin: ["/admin", "/manager", "/client"], // Can access all
        project_manager: [
          "/manager", 
          "/admin/projects", 
          "/admin/site-schedule", 
          "/admin/messages", 
          "/admin/analytics", 
          "/admin/files", 
          "/admin/calendar"
        ],
        client: [
          "/client", 
          "/admin/projects", 
          "/admin/site-schedule", 
          "/admin/messages", 
          "/admin/files", 
          "/admin/calendar"
        ]
      };

      // EXISTING: Check if user is trying to access a role-specific dashboard root
      if (pathname === "/admin" && userRole !== "super_admin") {
        return NextResponse.redirect(new URL(getRoleBasedRedirect(userRole), request.url));
      }
      
      if (pathname === "/manager" && userRole !== "project_manager" && userRole !== "super_admin") {
        return NextResponse.redirect(new URL(getRoleBasedRedirect(userRole), request.url));
      }
      
      if (pathname === "/client" && userRole !== "client" && userRole !== "super_admin") {
        return NextResponse.redirect(new URL(getRoleBasedRedirect(userRole), request.url));
      }

      // EXISTING: Better unauthorized page handling
      const adminOnlyRoutes = ["/admin/users", "/admin/system"];
      if (adminOnlyRoutes.some(route => pathname.startsWith(route)) && userRole !== "super_admin") {
        return NextResponse.redirect(new URL(getRoleBasedRedirect(userRole), request.url));
      }

      // EXISTING: Check general route access with better error handling
      const allowedRoutes = roleRoutes[userRole] || [];
      const hasAccess = allowedRoutes.some(route => pathname.startsWith(route));
      
      if (!hasAccess && !pathname.startsWith("/api/")) {
        return NextResponse.redirect(new URL(getRoleBasedRedirect(userRole), request.url));
      }

      // ENHANCED: API route protection with file security headers
      if (pathname.startsWith("/api/") && !pathname.startsWith("/api/auth")) {
        const response = NextResponse.next();
        
        // EXISTING: Standard headers
        response.headers.set("x-user-role", userRole);
        response.headers.set("x-user-id", token.id as string);
        response.headers.set("x-user-email", token.email as string);
        response.headers.set("x-session-timestamp", new Date().toISOString());
        
        // NEW: Add file security headers for file operations
        if (pathname.startsWith('/api/files/')) {
          // Security headers for file operations
          response.headers.set('X-Content-Type-Options', 'nosniff');
          response.headers.set('X-Frame-Options', 'DENY');
          response.headers.set('X-XSS-Protection', '1; mode=block');
          response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');
          
          // Prevent caching of sensitive file operations
          if (pathname.includes('/preview') || pathname.includes('/download')) {
            response.headers.set('Cache-Control', 'private, no-cache, no-store, must-revalidate');
            response.headers.set('Pragma', 'no-cache');
            response.headers.set('Expires', '0');
          }
        }
        
        return response;
      }
    }

    return NextResponse.next();
  },
  {
    callbacks: {
      authorized: ({ token, req }) => {
        const { pathname } = req.nextUrl;
        
        // EXISTING: Allow service worker files without authentication
        if (pathname === '/sw.js' || 
            pathname === '/service-worker.js' || 
            pathname === '/manifest.json' ||
            (pathname.startsWith('/workbox-') && pathname.endsWith('.js'))) {
          return true;
        }
        
        // EXISTING: Allow access to public routes
        const publicRoutes = ["/login", "/api/auth", "/unauthorized"];
        if (publicRoutes.some(route => pathname.startsWith(route))) {
          return true;
        }

        // EXISTING: Require authentication for all other routes
        return !!token && !!token.id && !!token.role;
      },
    },
  }
);

// EXISTING FUNCTIONS - Unchanged
function getRoleBasedRedirect(role: string): string {
  switch (role) {
    case "super_admin":
      return "/admin";
    case "project_manager":
      return "/manager";
    case "client":
      return "/client";
    default:
      return "/login";
  }
}

function getAllowedPathsForRole(role: string): string[] {
  switch (role) {
    case "super_admin":
      return ["/admin", "/manager", "/client"];
    case "project_manager":
      return ["/manager", "/admin/projects", "/admin/site-schedule", "/admin/messages", "/admin/files", "/admin/calendar"];
    case "client":
      return ["/client", "/admin/projects", "/admin/site-schedule", "/admin/messages", "/admin/files", "/admin/calendar"];
    default:
      return [];
  }
}

// EXISTING CONFIG - Unchanged
export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - public folder
     * - api/auth (NextAuth API routes)
     * UPDATED: Added service worker files to be handled by middleware
     */
    "/((?!_next/static|_next/image|favicon.ico|public|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)",
  ],
};